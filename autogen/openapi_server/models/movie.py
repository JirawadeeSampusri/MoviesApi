# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Movie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, director_name=None, duration=None, actor_2_name=None, genres=None, actor_1_name=None, movie_title=None, num_voted_user=None, actor_3_name=None, movie_imdb_link=None, num_user_for_reviews=None, language=None, country=None, title_year=None, imdb_score=None):  # noqa: E501
        """Movie - a model defined in OpenAPI

        :param director_name: The director_name of this Movie.  # noqa: E501
        :type director_name: str
        :param duration: The duration of this Movie.  # noqa: E501
        :type duration: str
        :param actor_2_name: The actor_2_name of this Movie.  # noqa: E501
        :type actor_2_name: str
        :param genres: The genres of this Movie.  # noqa: E501
        :type genres: str
        :param actor_1_name: The actor_1_name of this Movie.  # noqa: E501
        :type actor_1_name: str
        :param movie_title: The movie_title of this Movie.  # noqa: E501
        :type movie_title: str
        :param num_voted_user: The num_voted_user of this Movie.  # noqa: E501
        :type num_voted_user: int
        :param actor_3_name: The actor_3_name of this Movie.  # noqa: E501
        :type actor_3_name: str
        :param movie_imdb_link: The movie_imdb_link of this Movie.  # noqa: E501
        :type movie_imdb_link: str
        :param num_user_for_reviews: The num_user_for_reviews of this Movie.  # noqa: E501
        :type num_user_for_reviews: int
        :param language: The language of this Movie.  # noqa: E501
        :type language: str
        :param country: The country of this Movie.  # noqa: E501
        :type country: str
        :param title_year: The title_year of this Movie.  # noqa: E501
        :type title_year: int
        :param imdb_score: The imdb_score of this Movie.  # noqa: E501
        :type imdb_score: float
        """
        self.openapi_types = {
            'director_name': str,
            'duration': str,
            'actor_2_name': str,
            'genres': str,
            'actor_1_name': str,
            'movie_title': str,
            'num_voted_user': int,
            'actor_3_name': str,
            'movie_imdb_link': str,
            'num_user_for_reviews': int,
            'language': str,
            'country': str,
            'title_year': int,
            'imdb_score': float
        }

        self.attribute_map = {
            'director_name': 'director_name',
            'duration': 'duration',
            'actor_2_name': 'actor_2_name',
            'genres': 'genres',
            'actor_1_name': 'actor_1_name',
            'movie_title': 'movie_title',
            'num_voted_user': 'num_voted_user',
            'actor_3_name': 'actor_3_name',
            'movie_imdb_link': 'movie_imdb_link',
            'num_user_for_reviews': 'num_user_for_reviews',
            'language': 'language',
            'country': 'country',
            'title_year': 'title_year',
            'imdb_score': 'imdb_score'
        }

        self._director_name = director_name
        self._duration = duration
        self._actor_2_name = actor_2_name
        self._genres = genres
        self._actor_1_name = actor_1_name
        self._movie_title = movie_title
        self._num_voted_user = num_voted_user
        self._actor_3_name = actor_3_name
        self._movie_imdb_link = movie_imdb_link
        self._num_user_for_reviews = num_user_for_reviews
        self._language = language
        self._country = country
        self._title_year = title_year
        self._imdb_score = imdb_score

    @classmethod
    def from_dict(cls, dikt) -> 'Movie':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Movie of this Movie.  # noqa: E501
        :rtype: Movie
        """
        return util.deserialize_model(dikt, cls)

    @property
    def director_name(self):
        """Gets the director_name of this Movie.


        :return: The director_name of this Movie.
        :rtype: str
        """
        return self._director_name

    @director_name.setter
    def director_name(self, director_name):
        """Sets the director_name of this Movie.


        :param director_name: The director_name of this Movie.
        :type director_name: str
        """

        self._director_name = director_name

    @property
    def duration(self):
        """Gets the duration of this Movie.


        :return: The duration of this Movie.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Movie.


        :param duration: The duration of this Movie.
        :type duration: str
        """

        self._duration = duration

    @property
    def actor_2_name(self):
        """Gets the actor_2_name of this Movie.


        :return: The actor_2_name of this Movie.
        :rtype: str
        """
        return self._actor_2_name

    @actor_2_name.setter
    def actor_2_name(self, actor_2_name):
        """Sets the actor_2_name of this Movie.


        :param actor_2_name: The actor_2_name of this Movie.
        :type actor_2_name: str
        """

        self._actor_2_name = actor_2_name

    @property
    def genres(self):
        """Gets the genres of this Movie.


        :return: The genres of this Movie.
        :rtype: str
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this Movie.


        :param genres: The genres of this Movie.
        :type genres: str
        """

        self._genres = genres

    @property
    def actor_1_name(self):
        """Gets the actor_1_name of this Movie.


        :return: The actor_1_name of this Movie.
        :rtype: str
        """
        return self._actor_1_name

    @actor_1_name.setter
    def actor_1_name(self, actor_1_name):
        """Sets the actor_1_name of this Movie.


        :param actor_1_name: The actor_1_name of this Movie.
        :type actor_1_name: str
        """

        self._actor_1_name = actor_1_name

    @property
    def movie_title(self):
        """Gets the movie_title of this Movie.


        :return: The movie_title of this Movie.
        :rtype: str
        """
        return self._movie_title

    @movie_title.setter
    def movie_title(self, movie_title):
        """Sets the movie_title of this Movie.


        :param movie_title: The movie_title of this Movie.
        :type movie_title: str
        """

        self._movie_title = movie_title

    @property
    def num_voted_user(self):
        """Gets the num_voted_user of this Movie.


        :return: The num_voted_user of this Movie.
        :rtype: int
        """
        return self._num_voted_user

    @num_voted_user.setter
    def num_voted_user(self, num_voted_user):
        """Sets the num_voted_user of this Movie.


        :param num_voted_user: The num_voted_user of this Movie.
        :type num_voted_user: int
        """

        self._num_voted_user = num_voted_user

    @property
    def actor_3_name(self):
        """Gets the actor_3_name of this Movie.


        :return: The actor_3_name of this Movie.
        :rtype: str
        """
        return self._actor_3_name

    @actor_3_name.setter
    def actor_3_name(self, actor_3_name):
        """Sets the actor_3_name of this Movie.


        :param actor_3_name: The actor_3_name of this Movie.
        :type actor_3_name: str
        """

        self._actor_3_name = actor_3_name

    @property
    def movie_imdb_link(self):
        """Gets the movie_imdb_link of this Movie.


        :return: The movie_imdb_link of this Movie.
        :rtype: str
        """
        return self._movie_imdb_link

    @movie_imdb_link.setter
    def movie_imdb_link(self, movie_imdb_link):
        """Sets the movie_imdb_link of this Movie.


        :param movie_imdb_link: The movie_imdb_link of this Movie.
        :type movie_imdb_link: str
        """

        self._movie_imdb_link = movie_imdb_link

    @property
    def num_user_for_reviews(self):
        """Gets the num_user_for_reviews of this Movie.


        :return: The num_user_for_reviews of this Movie.
        :rtype: int
        """
        return self._num_user_for_reviews

    @num_user_for_reviews.setter
    def num_user_for_reviews(self, num_user_for_reviews):
        """Sets the num_user_for_reviews of this Movie.


        :param num_user_for_reviews: The num_user_for_reviews of this Movie.
        :type num_user_for_reviews: int
        """

        self._num_user_for_reviews = num_user_for_reviews

    @property
    def language(self):
        """Gets the language of this Movie.


        :return: The language of this Movie.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Movie.


        :param language: The language of this Movie.
        :type language: str
        """

        self._language = language

    @property
    def country(self):
        """Gets the country of this Movie.


        :return: The country of this Movie.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Movie.


        :param country: The country of this Movie.
        :type country: str
        """

        self._country = country

    @property
    def title_year(self):
        """Gets the title_year of this Movie.


        :return: The title_year of this Movie.
        :rtype: int
        """
        return self._title_year

    @title_year.setter
    def title_year(self, title_year):
        """Sets the title_year of this Movie.


        :param title_year: The title_year of this Movie.
        :type title_year: int
        """

        self._title_year = title_year

    @property
    def imdb_score(self):
        """Gets the imdb_score of this Movie.


        :return: The imdb_score of this Movie.
        :rtype: float
        """
        return self._imdb_score

    @imdb_score.setter
    def imdb_score(self, imdb_score):
        """Sets the imdb_score of this Movie.


        :param imdb_score: The imdb_score of this Movie.
        :type imdb_score: float
        """

        self._imdb_score = imdb_score
