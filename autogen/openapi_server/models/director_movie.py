# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DirectorMovie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, director_name=None, movie_title=None, title_year=None, genres=None, imdb_score=None):  # noqa: E501
        """DirectorMovie - a model defined in OpenAPI

        :param director_name: The director_name of this DirectorMovie.  # noqa: E501
        :type director_name: str
        :param movie_title: The movie_title of this DirectorMovie.  # noqa: E501
        :type movie_title: str
        :param title_year: The title_year of this DirectorMovie.  # noqa: E501
        :type title_year: int
        :param genres: The genres of this DirectorMovie.  # noqa: E501
        :type genres: str
        :param imdb_score: The imdb_score of this DirectorMovie.  # noqa: E501
        :type imdb_score: float
        """
        self.openapi_types = {
            'director_name': str,
            'movie_title': str,
            'title_year': int,
            'genres': str,
            'imdb_score': float
        }

        self.attribute_map = {
            'director_name': 'director_name',
            'movie_title': 'movie_title',
            'title_year': 'title_year',
            'genres': 'genres',
            'imdb_score': 'imdb_score'
        }

        self._director_name = director_name
        self._movie_title = movie_title
        self._title_year = title_year
        self._genres = genres
        self._imdb_score = imdb_score

    @classmethod
    def from_dict(cls, dikt) -> 'DirectorMovie':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DirectorMovie of this DirectorMovie.  # noqa: E501
        :rtype: DirectorMovie
        """
        return util.deserialize_model(dikt, cls)

    @property
    def director_name(self):
        """Gets the director_name of this DirectorMovie.


        :return: The director_name of this DirectorMovie.
        :rtype: str
        """
        return self._director_name

    @director_name.setter
    def director_name(self, director_name):
        """Sets the director_name of this DirectorMovie.


        :param director_name: The director_name of this DirectorMovie.
        :type director_name: str
        """

        self._director_name = director_name

    @property
    def movie_title(self):
        """Gets the movie_title of this DirectorMovie.


        :return: The movie_title of this DirectorMovie.
        :rtype: str
        """
        return self._movie_title

    @movie_title.setter
    def movie_title(self, movie_title):
        """Sets the movie_title of this DirectorMovie.


        :param movie_title: The movie_title of this DirectorMovie.
        :type movie_title: str
        """

        self._movie_title = movie_title

    @property
    def title_year(self):
        """Gets the title_year of this DirectorMovie.


        :return: The title_year of this DirectorMovie.
        :rtype: int
        """
        return self._title_year

    @title_year.setter
    def title_year(self, title_year):
        """Sets the title_year of this DirectorMovie.


        :param title_year: The title_year of this DirectorMovie.
        :type title_year: int
        """

        self._title_year = title_year

    @property
    def genres(self):
        """Gets the genres of this DirectorMovie.


        :return: The genres of this DirectorMovie.
        :rtype: str
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this DirectorMovie.


        :param genres: The genres of this DirectorMovie.
        :type genres: str
        """

        self._genres = genres

    @property
    def imdb_score(self):
        """Gets the imdb_score of this DirectorMovie.


        :return: The imdb_score of this DirectorMovie.
        :rtype: float
        """
        return self._imdb_score

    @imdb_score.setter
    def imdb_score(self, imdb_score):
        """Sets the imdb_score of this DirectorMovie.


        :param imdb_score: The imdb_score of this DirectorMovie.
        :type imdb_score: float
        """

        self._imdb_score = imdb_score
