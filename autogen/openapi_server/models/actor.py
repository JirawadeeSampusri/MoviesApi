# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Actor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor_name=None, imdb_avg_score=None):  # noqa: E501
        """Actor - a model defined in OpenAPI

        :param actor_name: The actor_name of this Actor.  # noqa: E501
        :type actor_name: str
        :param imdb_avg_score: The imdb_avg_score of this Actor.  # noqa: E501
        :type imdb_avg_score: float
        """
        self.openapi_types = {
            'actor_name': str,
            'imdb_avg_score': float
        }

        self.attribute_map = {
            'actor_name': 'actor_name',
            'imdb_avg_score': 'imdb_avg_score'
        }

        self._actor_name = actor_name
        self._imdb_avg_score = imdb_avg_score

    @classmethod
    def from_dict(cls, dikt) -> 'Actor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Actor of this Actor.  # noqa: E501
        :rtype: Actor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_name(self):
        """Gets the actor_name of this Actor.


        :return: The actor_name of this Actor.
        :rtype: str
        """
        return self._actor_name

    @actor_name.setter
    def actor_name(self, actor_name):
        """Sets the actor_name of this Actor.


        :param actor_name: The actor_name of this Actor.
        :type actor_name: str
        """

        self._actor_name = actor_name

    @property
    def imdb_avg_score(self):
        """Gets the imdb_avg_score of this Actor.


        :return: The imdb_avg_score of this Actor.
        :rtype: float
        """
        return self._imdb_avg_score

    @imdb_avg_score.setter
    def imdb_avg_score(self, imdb_avg_score):
        """Sets the imdb_avg_score of this Actor.


        :param imdb_avg_score: The imdb_avg_score of this Actor.
        :type imdb_avg_score: float
        """

        self._imdb_avg_score = imdb_avg_score
